/*Задание 1. Вначале интерпретатор "пробегается" по коду и определяет, что объявлена глобальная переменная var a. Она является свойством объекта window. Таким образом, при выполнении кода "a" in window = true, то есть !("a" in window) = false. Значит, в if при выполнении кода мы заходить не будем, и инициализации (то есть присвоения значения) переменной а не произойдет. На выходе получим undefined. Ответ: undefined.*/
if (!("a" in window)) {
	var a = 1;
}
alert(a);
/*Задание 2. Будет отшибка a is not defined. Если бы вначале была объявлена одноименная переменная var a, то alert(a) должен был бы вывести ее значение или undefined, если она не инициализирована.*/
var b = function a(x) {
	x && a(--x);
};
alert(a);
/*Задание 3. В данном коде объявлена функция и переменная, однако поскольку переменная не инициализирована, то функция оказывается "важнее", как бы "перекрывает" объявление переменной. Таким образом, alert выведет код функции (то есть первые три строки).*/
function a(x) {
	return x * 2;
}
var a;
alert(a);
/*Задание 4. В данном случае arguments[i] - это массив аргументов функции. То есть в данном случае arguments[0] соответствует х, arguments[1] - это у, а arguments[2] - это а. Значит, при выполнении кода третий аргумент, указанный у b (то есть 3), заменится на 10. Ответ: 10.*/
function b(x, y, a) {
	arguments[2] = 10;
	alert(a);
}
b(1, 2, 3);
/*Задание 5. В данном примере this для функции - это window, то есть alert(this) выведел бы window. В строке a.call(null) функция вызывается так, как будто this = window, если не используется 'use strict'. Ответ: object Window.*/
function a() {
	alert(this);
}
a.call(null);